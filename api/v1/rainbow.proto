syntax = "proto3";

package convergedcomputing.org.grpc.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/converged-computing/rainbow/pkg/api/v1";

// RainbowSchedulerService provides API endpoints for interacting with the central scheduler service
service RainbowScheduler {

  // Register cluster - request to register a new cluster
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // Job Submission - request for submitting a job to a named cluster
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);

  // Request Job - ask the rainbow scheduler for up to max jobs
  rpc RequestJobs(RequestJobsRequest) returns (RequestJobsResponse);

   // Accept Jobs - accept some number of jobs
   rpc AcceptJobs(AcceptJobsRequest) returns (AcceptJobsResponse);

  // TESTING ENDPOINTS
  // Serial checks the connectivity and response time of the service.
  rpc Serial(Request) returns (Response);

  // Stream continuously sends and receives response messages.
  // It is useful for scenarios where constant data flow is required.
  rpc Stream(stream Request) returns (stream Response);
}

// Content represents the message content with metadata.
message Content {
  // Unique identifier for the message (e.g., uuid).
  string id = 1;

  // Actual content of the message in binary format.
  google.protobuf.Any data = 2;

  // Additional information about the message in key-value pairs.
  map<string, string> metadata = 3;
}

// Request represents the request for a method invocation.
// It includes the content to be sent and a timestamp.
message Request {
  Content content = 1;
  google.protobuf.Timestamp sent = 2;
}

// RegisterRequest registers a cluster to the scheduler service 
// The shared secret is required to validate the request
message RegisterRequest {
  string name = 1;
  string secret = 2;
  
  // JGF json of nodes (needs to be read in with jsongraph-go)
  string nodes = 3;
  google.protobuf.Timestamp sent = 4;
}

// SubmitJobRequest takes a job name, cluster name
// and requires the cluster token. Since we want to be generic,
// we currently accept nodes, tasks, and the command
message SubmitJobRequest {
  string name = 1;
  string cluster = 2;
  string token = 3;
  int32 nodes = 4;
  int32 tasks = 5;
  string command = 6;
  google.protobuf.Timestamp sent = 7;
}

// RequestJobsRequest is used by a cluster (or other entity that can run jobs)
// to get back a maximum of N jobs. This will (and should) eventually
// support filters / sorting criteria, but now we just take the top
// N from a query. The response includes the ids that are accepted
message RequestJobsRequest {
  string cluster = 1;

  // cluster secret given on registration 
  // No other cluster or user can take a cluster's jobs!
  string secret = 2;

  // Max jobs to request
  int32 maxJobs = 3;
  google.protobuf.Timestamp sent = 7;
}

// N from a query. The response includes the ids that are accepted
message AcceptJobsRequest {
  string cluster = 1;
  string secret = 2;
  repeated int32 jobids = 3;
  google.protobuf.Timestamp sent = 4;
}


// Testing response - the server's response to a request.
message Response {

  // Enum to represent the result types of the operation.
  enum ResultType {
    RESULT_TYPE_UNSPECIFIED = 0;
    RESULT_TYPE_SUCCESS = 1;
    RESULT_TYPE_ERROR = 2;
  }

  string request_id = 1;
  int64 message_count = 2;
  int64 messages_processed = 3;
  string processing_details = 4;
}

// Register Response
message RegisterResponse {

  // Registration statuses
  enum ResultType {
    REGISTER_UNSPECIFIED = 0;
    REGISTER_SUCCESS = 1;
    REGISTER_ERROR = 2;
    REGISTER_DENIED = 3;
    REGISTER_EXISTS = 4;
  }
  string request_id = 1;

  // The "token" is given to clients (or this cluster) to submit jobs
  // In the future this should be able to be refreshed
  string token = 2;

  // The "secret" is for this cluster to receive them.
  string secret = 3;
  ResultType status = 4;
}

// Submit Job Response
message SubmitJobResponse {

  // Enum to represent the result types of the operation.
  enum ResultType {
    SUBMIT_UNSPECIFIED = 0;
    SUBMIT_SUCCESS = 1;
    SUBMIT_ERROR = 2;
    SUBMIT_DENIED = 3;
  }
  string request_id = 1;
  int32 jobid = 2;
  ResultType status = 3;
}

// RequestJobsResponse
message RequestJobsResponse {

  // Enum to represent the result types of the operation.
  enum ResultType {
    REQUEST_JOBS_NORESULTS = 0;
    REQUEST_JOBS_SUCCESS = 1;
    REQUEST_JOBS_ERROR = 2;
    REQUEST_JOBS_DENIED = 3;
  }
  string request_id = 1;
  map<int32, string> jobs = 2;
  //  repeated int32 accepted_jobids = 2;
  ResultType status = 3;
}

// Accept Jobs Response
message AcceptJobsResponse {

  enum ResultType {
    RESULT_TYPE_UNSPECIFIED = 0;
    RESULT_TYPE_PARTIAL = 1;
    RESULT_TYPE_SUCCESS = 2;
    RESULT_TYPE_ERROR = 3;
  }
  ResultType status = 1;
}