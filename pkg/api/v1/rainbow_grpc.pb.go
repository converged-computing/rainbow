// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: rainbow.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RainbowSchedulerClient is the client API for RainbowScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RainbowSchedulerClient interface {
	// Register cluster - request to register a new cluster
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Register cluster - request to register a new cluster
	RegisterSubsystem(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Job Submission - request for submitting a job to a named cluster
	SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error)
	// Request Job - ask the rainbow scheduler for up to max jobs
	ReceiveJobs(ctx context.Context, in *ReceiveJobsRequest, opts ...grpc.CallOption) (*ReceiveJobsResponse, error)
	// Accept Jobs - accept some number of jobs
	AcceptJobs(ctx context.Context, in *AcceptJobsRequest, opts ...grpc.CallOption) (*AcceptJobsResponse, error)
}

type rainbowSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewRainbowSchedulerClient(cc grpc.ClientConnInterface) RainbowSchedulerClient {
	return &rainbowSchedulerClient{cc}
}

func (c *rainbowSchedulerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/convergedcomputing.org.grpc.v1.RainbowScheduler/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rainbowSchedulerClient) RegisterSubsystem(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/convergedcomputing.org.grpc.v1.RainbowScheduler/RegisterSubsystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rainbowSchedulerClient) SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error) {
	out := new(SubmitJobResponse)
	err := c.cc.Invoke(ctx, "/convergedcomputing.org.grpc.v1.RainbowScheduler/SubmitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rainbowSchedulerClient) ReceiveJobs(ctx context.Context, in *ReceiveJobsRequest, opts ...grpc.CallOption) (*ReceiveJobsResponse, error) {
	out := new(ReceiveJobsResponse)
	err := c.cc.Invoke(ctx, "/convergedcomputing.org.grpc.v1.RainbowScheduler/ReceiveJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rainbowSchedulerClient) AcceptJobs(ctx context.Context, in *AcceptJobsRequest, opts ...grpc.CallOption) (*AcceptJobsResponse, error) {
	out := new(AcceptJobsResponse)
	err := c.cc.Invoke(ctx, "/convergedcomputing.org.grpc.v1.RainbowScheduler/AcceptJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RainbowSchedulerServer is the server API for RainbowScheduler service.
// All implementations must embed UnimplementedRainbowSchedulerServer
// for forward compatibility
type RainbowSchedulerServer interface {
	// Register cluster - request to register a new cluster
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Register cluster - request to register a new cluster
	RegisterSubsystem(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Job Submission - request for submitting a job to a named cluster
	SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error)
	// Request Job - ask the rainbow scheduler for up to max jobs
	ReceiveJobs(context.Context, *ReceiveJobsRequest) (*ReceiveJobsResponse, error)
	// Accept Jobs - accept some number of jobs
	AcceptJobs(context.Context, *AcceptJobsRequest) (*AcceptJobsResponse, error)
	mustEmbedUnimplementedRainbowSchedulerServer()
}

// UnimplementedRainbowSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedRainbowSchedulerServer struct {
}

func (UnimplementedRainbowSchedulerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRainbowSchedulerServer) RegisterSubsystem(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSubsystem not implemented")
}
func (UnimplementedRainbowSchedulerServer) SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedRainbowSchedulerServer) ReceiveJobs(context.Context, *ReceiveJobsRequest) (*ReceiveJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveJobs not implemented")
}
func (UnimplementedRainbowSchedulerServer) AcceptJobs(context.Context, *AcceptJobsRequest) (*AcceptJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptJobs not implemented")
}
func (UnimplementedRainbowSchedulerServer) mustEmbedUnimplementedRainbowSchedulerServer() {}

// UnsafeRainbowSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RainbowSchedulerServer will
// result in compilation errors.
type UnsafeRainbowSchedulerServer interface {
	mustEmbedUnimplementedRainbowSchedulerServer()
}

func RegisterRainbowSchedulerServer(s grpc.ServiceRegistrar, srv RainbowSchedulerServer) {
	s.RegisterService(&RainbowScheduler_ServiceDesc, srv)
}

func _RainbowScheduler_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainbowSchedulerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convergedcomputing.org.grpc.v1.RainbowScheduler/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainbowSchedulerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RainbowScheduler_RegisterSubsystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainbowSchedulerServer).RegisterSubsystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convergedcomputing.org.grpc.v1.RainbowScheduler/RegisterSubsystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainbowSchedulerServer).RegisterSubsystem(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RainbowScheduler_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainbowSchedulerServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convergedcomputing.org.grpc.v1.RainbowScheduler/SubmitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainbowSchedulerServer).SubmitJob(ctx, req.(*SubmitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RainbowScheduler_ReceiveJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainbowSchedulerServer).ReceiveJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convergedcomputing.org.grpc.v1.RainbowScheduler/ReceiveJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainbowSchedulerServer).ReceiveJobs(ctx, req.(*ReceiveJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RainbowScheduler_AcceptJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RainbowSchedulerServer).AcceptJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convergedcomputing.org.grpc.v1.RainbowScheduler/AcceptJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RainbowSchedulerServer).AcceptJobs(ctx, req.(*AcceptJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RainbowScheduler_ServiceDesc is the grpc.ServiceDesc for RainbowScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RainbowScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "convergedcomputing.org.grpc.v1.RainbowScheduler",
	HandlerType: (*RainbowSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RainbowScheduler_Register_Handler,
		},
		{
			MethodName: "RegisterSubsystem",
			Handler:    _RainbowScheduler_RegisterSubsystem_Handler,
		},
		{
			MethodName: "SubmitJob",
			Handler:    _RainbowScheduler_SubmitJob_Handler,
		},
		{
			MethodName: "ReceiveJobs",
			Handler:    _RainbowScheduler_ReceiveJobs_Handler,
		},
		{
			MethodName: "AcceptJobs",
			Handler:    _RainbowScheduler_AcceptJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rainbow.proto",
}
