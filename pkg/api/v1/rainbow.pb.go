// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: rainbow.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeleteResponse_ResultType int32

const (
	DeleteResponse_DELETE_SUCCESS   DeleteResponse_ResultType = 0
	DeleteResponse_DELETE_ERROR     DeleteResponse_ResultType = 1
	DeleteResponse_DELETE_DENIED    DeleteResponse_ResultType = 2
	DeleteResponse_DELETE_NO_EXISTS DeleteResponse_ResultType = 3
)

// Enum value maps for DeleteResponse_ResultType.
var (
	DeleteResponse_ResultType_name = map[int32]string{
		0: "DELETE_SUCCESS",
		1: "DELETE_ERROR",
		2: "DELETE_DENIED",
		3: "DELETE_NO_EXISTS",
	}
	DeleteResponse_ResultType_value = map[string]int32{
		"DELETE_SUCCESS":   0,
		"DELETE_ERROR":     1,
		"DELETE_DENIED":    2,
		"DELETE_NO_EXISTS": 3,
	}
)

func (x DeleteResponse_ResultType) Enum() *DeleteResponse_ResultType {
	p := new(DeleteResponse_ResultType)
	*p = x
	return p
}

func (x DeleteResponse_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeleteResponse_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[0].Descriptor()
}

func (DeleteResponse_ResultType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[0]
}

func (x DeleteResponse_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeleteResponse_ResultType.Descriptor instead.
func (DeleteResponse_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{2, 0}
}

type UpdateStateResponse_ResultType int32

const (
	UpdateStateResponse_UPDATE_STATE_UNSPECIFIED UpdateStateResponse_ResultType = 0
	UpdateStateResponse_UPDATE_STATE_PARTIAL     UpdateStateResponse_ResultType = 1
	UpdateStateResponse_UPDATE_STATE_SUCCESS     UpdateStateResponse_ResultType = 2
	UpdateStateResponse_UPDATE_STATE_ERROR       UpdateStateResponse_ResultType = 3
)

// Enum value maps for UpdateStateResponse_ResultType.
var (
	UpdateStateResponse_ResultType_name = map[int32]string{
		0: "UPDATE_STATE_UNSPECIFIED",
		1: "UPDATE_STATE_PARTIAL",
		2: "UPDATE_STATE_SUCCESS",
		3: "UPDATE_STATE_ERROR",
	}
	UpdateStateResponse_ResultType_value = map[string]int32{
		"UPDATE_STATE_UNSPECIFIED": 0,
		"UPDATE_STATE_PARTIAL":     1,
		"UPDATE_STATE_SUCCESS":     2,
		"UPDATE_STATE_ERROR":       3,
	}
)

func (x UpdateStateResponse_ResultType) Enum() *UpdateStateResponse_ResultType {
	p := new(UpdateStateResponse_ResultType)
	*p = x
	return p
}

func (x UpdateStateResponse_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateStateResponse_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[1].Descriptor()
}

func (UpdateStateResponse_ResultType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[1]
}

func (x UpdateStateResponse_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateStateResponse_ResultType.Descriptor instead.
func (UpdateStateResponse_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{4, 0}
}

// Registration statuses
type RegisterResponse_ResultType int32

const (
	RegisterResponse_REGISTER_UNSPECIFIED RegisterResponse_ResultType = 0
	RegisterResponse_REGISTER_SUCCESS     RegisterResponse_ResultType = 1
	RegisterResponse_REGISTER_ERROR       RegisterResponse_ResultType = 2
	RegisterResponse_REGISTER_DENIED      RegisterResponse_ResultType = 3
	RegisterResponse_REGISTER_EXISTS      RegisterResponse_ResultType = 4
)

// Enum value maps for RegisterResponse_ResultType.
var (
	RegisterResponse_ResultType_name = map[int32]string{
		0: "REGISTER_UNSPECIFIED",
		1: "REGISTER_SUCCESS",
		2: "REGISTER_ERROR",
		3: "REGISTER_DENIED",
		4: "REGISTER_EXISTS",
	}
	RegisterResponse_ResultType_value = map[string]int32{
		"REGISTER_UNSPECIFIED": 0,
		"REGISTER_SUCCESS":     1,
		"REGISTER_ERROR":       2,
		"REGISTER_DENIED":      3,
		"REGISTER_EXISTS":      4,
	}
)

func (x RegisterResponse_ResultType) Enum() *RegisterResponse_ResultType {
	p := new(RegisterResponse_ResultType)
	*p = x
	return p
}

func (x RegisterResponse_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterResponse_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[2].Descriptor()
}

func (RegisterResponse_ResultType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[2]
}

func (x RegisterResponse_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterResponse_ResultType.Descriptor instead.
func (RegisterResponse_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{8, 0}
}

// Enum to represent the result types of the operation.
type SubmitJobResponse_ResultType int32

const (
	SubmitJobResponse_SUBMIT_UNSPECIFIED SubmitJobResponse_ResultType = 0
	SubmitJobResponse_SUBMIT_SUCCESS     SubmitJobResponse_ResultType = 1
	SubmitJobResponse_SUBMIT_ERROR       SubmitJobResponse_ResultType = 2
	SubmitJobResponse_SUBMIT_DENIED      SubmitJobResponse_ResultType = 3
)

// Enum value maps for SubmitJobResponse_ResultType.
var (
	SubmitJobResponse_ResultType_name = map[int32]string{
		0: "SUBMIT_UNSPECIFIED",
		1: "SUBMIT_SUCCESS",
		2: "SUBMIT_ERROR",
		3: "SUBMIT_DENIED",
	}
	SubmitJobResponse_ResultType_value = map[string]int32{
		"SUBMIT_UNSPECIFIED": 0,
		"SUBMIT_SUCCESS":     1,
		"SUBMIT_ERROR":       2,
		"SUBMIT_DENIED":      3,
	}
)

func (x SubmitJobResponse_ResultType) Enum() *SubmitJobResponse_ResultType {
	p := new(SubmitJobResponse_ResultType)
	*p = x
	return p
}

func (x SubmitJobResponse_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitJobResponse_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[3].Descriptor()
}

func (SubmitJobResponse_ResultType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[3]
}

func (x SubmitJobResponse_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitJobResponse_ResultType.Descriptor instead.
func (SubmitJobResponse_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{9, 0}
}

// Enum to represent the result types of the operation.
type ReceiveJobsResponse_ResultType int32

const (
	ReceiveJobsResponse_REQUEST_JOBS_NORESULTS ReceiveJobsResponse_ResultType = 0
	ReceiveJobsResponse_REQUEST_JOBS_SUCCESS   ReceiveJobsResponse_ResultType = 1
	ReceiveJobsResponse_REQUEST_JOBS_ERROR     ReceiveJobsResponse_ResultType = 2
	ReceiveJobsResponse_REQUEST_JOBS_DENIED    ReceiveJobsResponse_ResultType = 3
)

// Enum value maps for ReceiveJobsResponse_ResultType.
var (
	ReceiveJobsResponse_ResultType_name = map[int32]string{
		0: "REQUEST_JOBS_NORESULTS",
		1: "REQUEST_JOBS_SUCCESS",
		2: "REQUEST_JOBS_ERROR",
		3: "REQUEST_JOBS_DENIED",
	}
	ReceiveJobsResponse_ResultType_value = map[string]int32{
		"REQUEST_JOBS_NORESULTS": 0,
		"REQUEST_JOBS_SUCCESS":   1,
		"REQUEST_JOBS_ERROR":     2,
		"REQUEST_JOBS_DENIED":    3,
	}
)

func (x ReceiveJobsResponse_ResultType) Enum() *ReceiveJobsResponse_ResultType {
	p := new(ReceiveJobsResponse_ResultType)
	*p = x
	return p
}

func (x ReceiveJobsResponse_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiveJobsResponse_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[4].Descriptor()
}

func (ReceiveJobsResponse_ResultType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[4]
}

func (x ReceiveJobsResponse_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiveJobsResponse_ResultType.Descriptor instead.
func (ReceiveJobsResponse_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{10, 0}
}

type AcceptJobsResponse_ResultType int32

const (
	AcceptJobsResponse_RESULT_TYPE_UNSPECIFIED AcceptJobsResponse_ResultType = 0
	AcceptJobsResponse_RESULT_TYPE_PARTIAL     AcceptJobsResponse_ResultType = 1
	AcceptJobsResponse_RESULT_TYPE_SUCCESS     AcceptJobsResponse_ResultType = 2
	AcceptJobsResponse_RESULT_TYPE_ERROR       AcceptJobsResponse_ResultType = 3
)

// Enum value maps for AcceptJobsResponse_ResultType.
var (
	AcceptJobsResponse_ResultType_name = map[int32]string{
		0: "RESULT_TYPE_UNSPECIFIED",
		1: "RESULT_TYPE_PARTIAL",
		2: "RESULT_TYPE_SUCCESS",
		3: "RESULT_TYPE_ERROR",
	}
	AcceptJobsResponse_ResultType_value = map[string]int32{
		"RESULT_TYPE_UNSPECIFIED": 0,
		"RESULT_TYPE_PARTIAL":     1,
		"RESULT_TYPE_SUCCESS":     2,
		"RESULT_TYPE_ERROR":       3,
	}
)

func (x AcceptJobsResponse_ResultType) Enum() *AcceptJobsResponse_ResultType {
	p := new(AcceptJobsResponse_ResultType)
	*p = x
	return p
}

func (x AcceptJobsResponse_ResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceptJobsResponse_ResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_rainbow_proto_enumTypes[5].Descriptor()
}

func (AcceptJobsResponse_ResultType) Type() protoreflect.EnumType {
	return &file_rainbow_proto_enumTypes[5]
}

func (x AcceptJobsResponse_ResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcceptJobsResponse_ResultType.Descriptor instead.
func (AcceptJobsResponse_ResultType) EnumDescriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{11, 0}
}

// RegisterRequest registers a cluster to the scheduler service
// The shared secret is required to validate the request
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// JGF json of nodes (needs to be read in with jsongraph-go)
	Nodes     string                 `protobuf:"bytes,3,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Subsystem string                 `protobuf:"bytes,4,opt,name=subsystem,proto3" json:"subsystem,omitempty"`
	Sent      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterRequest) GetNodes() string {
	if x != nil {
		return x.Nodes
	}
	return ""
}

func (x *RegisterRequest) GetSubsystem() string {
	if x != nil {
		return x.Subsystem
	}
	return ""
}

func (x *RegisterRequest) GetSent() *timestamppb.Timestamp {
	if x != nil {
		return x.Sent
	}
	return nil
}

// DeleteRequest handles deleting a cluster or subsystem
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Secret   string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	Subsytem string `protobuf:"bytes,3,opt,name=subsytem,proto3" json:"subsytem,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *DeleteRequest) GetSubsytem() string {
	if x != nil {
		return x.Subsytem
	}
	return ""
}

// Delete Response
type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status DeleteResponse_ResultType `protobuf:"varint,1,opt,name=status,proto3,enum=convergedcomputing.org.grpc.v1.DeleteResponse_ResultType" json:"status,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteResponse) GetStatus() DeleteResponse_ResultType {
	if x != nil {
		return x.Status
	}
	return DeleteResponse_DELETE_SUCCESS
}

// UpdateStateRequests allows a cluster to set arbitrary metadata
// for its state. State metadata is used for selection algorithms
type UpdateStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Secret  string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// We are generous that the payload can be a flat
	// set of key value pairs, and will be parsed into
	// types within the graph database
	Payload string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *UpdateStateRequest) Reset() {
	*x = UpdateStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateRequest) ProtoMessage() {}

func (x *UpdateStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateStateRequest) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateStateRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *UpdateStateRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *UpdateStateRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type UpdateStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UpdateStateResponse_ResultType `protobuf:"varint,1,opt,name=status,proto3,enum=convergedcomputing.org.grpc.v1.UpdateStateResponse_ResultType" json:"status,omitempty"`
}

func (x *UpdateStateResponse) Reset() {
	*x = UpdateStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStateResponse) ProtoMessage() {}

func (x *UpdateStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateStateResponse) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateStateResponse) GetStatus() UpdateStateResponse_ResultType {
	if x != nil {
		return x.Status
	}
	return UpdateStateResponse_UPDATE_STATE_UNSPECIFIED
}

// SubmitJobRequest takes a job name, cluster name
// and requires the cluster token. Since we want to be generic,
// we currently accept nodes, tasks, and the command
type SubmitJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Clusters        []*SubmitJobRequest_Cluster `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	Jobspec         string                      `protobuf:"bytes,3,opt,name=jobspec,proto3" json:"jobspec,omitempty"`
	SelectAlgorithm string                      `protobuf:"bytes,4,opt,name=select_algorithm,json=selectAlgorithm,proto3" json:"select_algorithm,omitempty"`
	SelectOptions   map[string]string           `protobuf:"bytes,5,rep,name=select_options,json=selectOptions,proto3" json:"select_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SatisfyOnly     bool                        `protobuf:"varint,6,opt,name=satisfy_only,json=satisfyOnly,proto3" json:"satisfy_only,omitempty"`
	Sent            *timestamppb.Timestamp      `protobuf:"bytes,7,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobRequest.ProtoReflect.Descriptor instead.
func (*SubmitJobRequest) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitJobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubmitJobRequest) GetClusters() []*SubmitJobRequest_Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *SubmitJobRequest) GetJobspec() string {
	if x != nil {
		return x.Jobspec
	}
	return ""
}

func (x *SubmitJobRequest) GetSelectAlgorithm() string {
	if x != nil {
		return x.SelectAlgorithm
	}
	return ""
}

func (x *SubmitJobRequest) GetSelectOptions() map[string]string {
	if x != nil {
		return x.SelectOptions
	}
	return nil
}

func (x *SubmitJobRequest) GetSatisfyOnly() bool {
	if x != nil {
		return x.SatisfyOnly
	}
	return false
}

func (x *SubmitJobRequest) GetSent() *timestamppb.Timestamp {
	if x != nil {
		return x.Sent
	}
	return nil
}

// RequestJobsRequest is used by a cluster (or other entity that can run jobs)
// to get back a maximum of N jobs. This will (and should) eventually
// support filters / sorting criteria, but now we just take the top
// N from a query. The response includes the ids that are accepted
type ReceiveJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// cluster secret given on registration
	// No other cluster or user can take a cluster's jobs!
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// Max jobs to request
	MaxJobs int32                  `protobuf:"varint,3,opt,name=maxJobs,proto3" json:"maxJobs,omitempty"`
	Sent    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (x *ReceiveJobsRequest) Reset() {
	*x = ReceiveJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveJobsRequest) ProtoMessage() {}

func (x *ReceiveJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveJobsRequest.ProtoReflect.Descriptor instead.
func (*ReceiveJobsRequest) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{6}
}

func (x *ReceiveJobsRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *ReceiveJobsRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ReceiveJobsRequest) GetMaxJobs() int32 {
	if x != nil {
		return x.MaxJobs
	}
	return 0
}

func (x *ReceiveJobsRequest) GetSent() *timestamppb.Timestamp {
	if x != nil {
		return x.Sent
	}
	return nil
}

// N from a query. The response includes the ids that are accepted
type AcceptJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster string                 `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Secret  string                 `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	Jobids  []int32                `protobuf:"varint,3,rep,packed,name=jobids,proto3" json:"jobids,omitempty"`
	Sent    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (x *AcceptJobsRequest) Reset() {
	*x = AcceptJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptJobsRequest) ProtoMessage() {}

func (x *AcceptJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptJobsRequest.ProtoReflect.Descriptor instead.
func (*AcceptJobsRequest) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{7}
}

func (x *AcceptJobsRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *AcceptJobsRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AcceptJobsRequest) GetJobids() []int32 {
	if x != nil {
		return x.Jobids
	}
	return nil
}

func (x *AcceptJobsRequest) GetSent() *timestamppb.Timestamp {
	if x != nil {
		return x.Sent
	}
	return nil
}

// Register Response
type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The "token" is given to clients (or this cluster) to submit jobs
	// In the future this should be able to be refreshed
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// The "secret" is for this cluster to receive them.
	Secret string                      `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	Status RegisterResponse_ResultType `protobuf:"varint,4,opt,name=status,proto3,enum=convergedcomputing.org.grpc.v1.RegisterResponse_ResultType" json:"status,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RegisterResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterResponse) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *RegisterResponse) GetStatus() RegisterResponse_ResultType {
	if x != nil {
		return x.Status
	}
	return RegisterResponse_REGISTER_UNSPECIFIED
}

// Submit Job Response
type SubmitJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                       `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Jobid     int32                        `protobuf:"varint,2,opt,name=jobid,proto3" json:"jobid,omitempty"`
	Cluster   string                       `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Status    SubmitJobResponse_ResultType `protobuf:"varint,4,opt,name=status,proto3,enum=convergedcomputing.org.grpc.v1.SubmitJobResponse_ResultType" json:"status,omitempty"`
	// A SatisfyOnly request can return the entire selected set
	Clusters []string `protobuf:"bytes,5,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *SubmitJobResponse) Reset() {
	*x = SubmitJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobResponse) ProtoMessage() {}

func (x *SubmitJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobResponse.ProtoReflect.Descriptor instead.
func (*SubmitJobResponse) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitJobResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SubmitJobResponse) GetJobid() int32 {
	if x != nil {
		return x.Jobid
	}
	return 0
}

func (x *SubmitJobResponse) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *SubmitJobResponse) GetStatus() SubmitJobResponse_ResultType {
	if x != nil {
		return x.Status
	}
	return SubmitJobResponse_SUBMIT_UNSPECIFIED
}

func (x *SubmitJobResponse) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// RequestJobsResponse
type ReceiveJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string           `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Jobs      map[int32]string `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// repeated int32 accepted_jobids = 2;
	Status ReceiveJobsResponse_ResultType `protobuf:"varint,3,opt,name=status,proto3,enum=convergedcomputing.org.grpc.v1.ReceiveJobsResponse_ResultType" json:"status,omitempty"`
}

func (x *ReceiveJobsResponse) Reset() {
	*x = ReceiveJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveJobsResponse) ProtoMessage() {}

func (x *ReceiveJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveJobsResponse.ProtoReflect.Descriptor instead.
func (*ReceiveJobsResponse) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{10}
}

func (x *ReceiveJobsResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReceiveJobsResponse) GetJobs() map[int32]string {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *ReceiveJobsResponse) GetStatus() ReceiveJobsResponse_ResultType {
	if x != nil {
		return x.Status
	}
	return ReceiveJobsResponse_REQUEST_JOBS_NORESULTS
}

// Accept Jobs Response
type AcceptJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status AcceptJobsResponse_ResultType `protobuf:"varint,1,opt,name=status,proto3,enum=convergedcomputing.org.grpc.v1.AcceptJobsResponse_ResultType" json:"status,omitempty"`
}

func (x *AcceptJobsResponse) Reset() {
	*x = AcceptJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptJobsResponse) ProtoMessage() {}

func (x *AcceptJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptJobsResponse.ProtoReflect.Descriptor instead.
func (*AcceptJobsResponse) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{11}
}

func (x *AcceptJobsResponse) GetStatus() AcceptJobsResponse_ResultType {
	if x != nil {
		return x.Status
	}
	return AcceptJobsResponse_RESULT_TYPE_UNSPECIFIED
}

type SubmitJobRequest_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SubmitJobRequest_Cluster) Reset() {
	*x = SubmitJobRequest_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rainbow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJobRequest_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest_Cluster) ProtoMessage() {}

func (x *SubmitJobRequest_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_rainbow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobRequest_Cluster.ProtoReflect.Descriptor instead.
func (*SubmitJobRequest_Cluster) Descriptor() ([]byte, []int) {
	return file_rainbow_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SubmitJobRequest_Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubmitJobRequest_Cluster) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_rainbow_proto protoreflect.FileDescriptor

var file_rainbow_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x73, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x73, 0x79, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x73, 0x79, 0x74, 0x65, 0x6d, 0x22, 0xc0, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03,
	0x22, 0x60, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0xe5, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x76, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xf7, 0x03, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x6a,
	0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x61,
	0x74, 0x69, 0x73, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x0a,
	0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x40, 0x0a,
	0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x33, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7a,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x22, 0xb3, 0x02, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x5d, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x03,
	0x22, 0x8d, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4a, 0x4f, 0x42, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x4a, 0x4f, 0x42, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4a, 0x4f, 0x42, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x4a, 0x4f, 0x42, 0x53, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x03,
	0x22, 0xdf, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x72,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x32, 0xab, 0x07, 0x0a, 0x10, 0x52, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x09, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4a, 0x6f,
	0x62, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x72, 0x61, 0x69, 0x6e, 0x62, 0x6f, 0x77, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rainbow_proto_rawDescOnce sync.Once
	file_rainbow_proto_rawDescData = file_rainbow_proto_rawDesc
)

func file_rainbow_proto_rawDescGZIP() []byte {
	file_rainbow_proto_rawDescOnce.Do(func() {
		file_rainbow_proto_rawDescData = protoimpl.X.CompressGZIP(file_rainbow_proto_rawDescData)
	})
	return file_rainbow_proto_rawDescData
}

var file_rainbow_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_rainbow_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_rainbow_proto_goTypes = []interface{}{
	(DeleteResponse_ResultType)(0),      // 0: convergedcomputing.org.grpc.v1.DeleteResponse.ResultType
	(UpdateStateResponse_ResultType)(0), // 1: convergedcomputing.org.grpc.v1.UpdateStateResponse.ResultType
	(RegisterResponse_ResultType)(0),    // 2: convergedcomputing.org.grpc.v1.RegisterResponse.ResultType
	(SubmitJobResponse_ResultType)(0),   // 3: convergedcomputing.org.grpc.v1.SubmitJobResponse.ResultType
	(ReceiveJobsResponse_ResultType)(0), // 4: convergedcomputing.org.grpc.v1.ReceiveJobsResponse.ResultType
	(AcceptJobsResponse_ResultType)(0),  // 5: convergedcomputing.org.grpc.v1.AcceptJobsResponse.ResultType
	(*RegisterRequest)(nil),             // 6: convergedcomputing.org.grpc.v1.RegisterRequest
	(*DeleteRequest)(nil),               // 7: convergedcomputing.org.grpc.v1.DeleteRequest
	(*DeleteResponse)(nil),              // 8: convergedcomputing.org.grpc.v1.DeleteResponse
	(*UpdateStateRequest)(nil),          // 9: convergedcomputing.org.grpc.v1.UpdateStateRequest
	(*UpdateStateResponse)(nil),         // 10: convergedcomputing.org.grpc.v1.UpdateStateResponse
	(*SubmitJobRequest)(nil),            // 11: convergedcomputing.org.grpc.v1.SubmitJobRequest
	(*ReceiveJobsRequest)(nil),          // 12: convergedcomputing.org.grpc.v1.ReceiveJobsRequest
	(*AcceptJobsRequest)(nil),           // 13: convergedcomputing.org.grpc.v1.AcceptJobsRequest
	(*RegisterResponse)(nil),            // 14: convergedcomputing.org.grpc.v1.RegisterResponse
	(*SubmitJobResponse)(nil),           // 15: convergedcomputing.org.grpc.v1.SubmitJobResponse
	(*ReceiveJobsResponse)(nil),         // 16: convergedcomputing.org.grpc.v1.ReceiveJobsResponse
	(*AcceptJobsResponse)(nil),          // 17: convergedcomputing.org.grpc.v1.AcceptJobsResponse
	nil,                                 // 18: convergedcomputing.org.grpc.v1.SubmitJobRequest.SelectOptionsEntry
	(*SubmitJobRequest_Cluster)(nil),    // 19: convergedcomputing.org.grpc.v1.SubmitJobRequest.Cluster
	nil,                                 // 20: convergedcomputing.org.grpc.v1.ReceiveJobsResponse.JobsEntry
	(*timestamppb.Timestamp)(nil),       // 21: google.protobuf.Timestamp
}
var file_rainbow_proto_depIdxs = []int32{
	21, // 0: convergedcomputing.org.grpc.v1.RegisterRequest.sent:type_name -> google.protobuf.Timestamp
	0,  // 1: convergedcomputing.org.grpc.v1.DeleteResponse.status:type_name -> convergedcomputing.org.grpc.v1.DeleteResponse.ResultType
	1,  // 2: convergedcomputing.org.grpc.v1.UpdateStateResponse.status:type_name -> convergedcomputing.org.grpc.v1.UpdateStateResponse.ResultType
	19, // 3: convergedcomputing.org.grpc.v1.SubmitJobRequest.clusters:type_name -> convergedcomputing.org.grpc.v1.SubmitJobRequest.Cluster
	18, // 4: convergedcomputing.org.grpc.v1.SubmitJobRequest.select_options:type_name -> convergedcomputing.org.grpc.v1.SubmitJobRequest.SelectOptionsEntry
	21, // 5: convergedcomputing.org.grpc.v1.SubmitJobRequest.sent:type_name -> google.protobuf.Timestamp
	21, // 6: convergedcomputing.org.grpc.v1.ReceiveJobsRequest.sent:type_name -> google.protobuf.Timestamp
	21, // 7: convergedcomputing.org.grpc.v1.AcceptJobsRequest.sent:type_name -> google.protobuf.Timestamp
	2,  // 8: convergedcomputing.org.grpc.v1.RegisterResponse.status:type_name -> convergedcomputing.org.grpc.v1.RegisterResponse.ResultType
	3,  // 9: convergedcomputing.org.grpc.v1.SubmitJobResponse.status:type_name -> convergedcomputing.org.grpc.v1.SubmitJobResponse.ResultType
	20, // 10: convergedcomputing.org.grpc.v1.ReceiveJobsResponse.jobs:type_name -> convergedcomputing.org.grpc.v1.ReceiveJobsResponse.JobsEntry
	4,  // 11: convergedcomputing.org.grpc.v1.ReceiveJobsResponse.status:type_name -> convergedcomputing.org.grpc.v1.ReceiveJobsResponse.ResultType
	5,  // 12: convergedcomputing.org.grpc.v1.AcceptJobsResponse.status:type_name -> convergedcomputing.org.grpc.v1.AcceptJobsResponse.ResultType
	6,  // 13: convergedcomputing.org.grpc.v1.RainbowScheduler.Register:input_type -> convergedcomputing.org.grpc.v1.RegisterRequest
	7,  // 14: convergedcomputing.org.grpc.v1.RainbowScheduler.Delete:input_type -> convergedcomputing.org.grpc.v1.DeleteRequest
	6,  // 15: convergedcomputing.org.grpc.v1.RainbowScheduler.RegisterSubsystem:input_type -> convergedcomputing.org.grpc.v1.RegisterRequest
	7,  // 16: convergedcomputing.org.grpc.v1.RainbowScheduler.DeleteSubsystem:input_type -> convergedcomputing.org.grpc.v1.DeleteRequest
	11, // 17: convergedcomputing.org.grpc.v1.RainbowScheduler.SubmitJob:input_type -> convergedcomputing.org.grpc.v1.SubmitJobRequest
	9,  // 18: convergedcomputing.org.grpc.v1.RainbowScheduler.UpdateState:input_type -> convergedcomputing.org.grpc.v1.UpdateStateRequest
	12, // 19: convergedcomputing.org.grpc.v1.RainbowScheduler.ReceiveJobs:input_type -> convergedcomputing.org.grpc.v1.ReceiveJobsRequest
	13, // 20: convergedcomputing.org.grpc.v1.RainbowScheduler.AcceptJobs:input_type -> convergedcomputing.org.grpc.v1.AcceptJobsRequest
	14, // 21: convergedcomputing.org.grpc.v1.RainbowScheduler.Register:output_type -> convergedcomputing.org.grpc.v1.RegisterResponse
	8,  // 22: convergedcomputing.org.grpc.v1.RainbowScheduler.Delete:output_type -> convergedcomputing.org.grpc.v1.DeleteResponse
	14, // 23: convergedcomputing.org.grpc.v1.RainbowScheduler.RegisterSubsystem:output_type -> convergedcomputing.org.grpc.v1.RegisterResponse
	8,  // 24: convergedcomputing.org.grpc.v1.RainbowScheduler.DeleteSubsystem:output_type -> convergedcomputing.org.grpc.v1.DeleteResponse
	15, // 25: convergedcomputing.org.grpc.v1.RainbowScheduler.SubmitJob:output_type -> convergedcomputing.org.grpc.v1.SubmitJobResponse
	10, // 26: convergedcomputing.org.grpc.v1.RainbowScheduler.UpdateState:output_type -> convergedcomputing.org.grpc.v1.UpdateStateResponse
	16, // 27: convergedcomputing.org.grpc.v1.RainbowScheduler.ReceiveJobs:output_type -> convergedcomputing.org.grpc.v1.ReceiveJobsResponse
	17, // 28: convergedcomputing.org.grpc.v1.RainbowScheduler.AcceptJobs:output_type -> convergedcomputing.org.grpc.v1.AcceptJobsResponse
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_rainbow_proto_init() }
func file_rainbow_proto_init() {
	if File_rainbow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rainbow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rainbow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitJobRequest_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rainbow_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rainbow_proto_goTypes,
		DependencyIndexes: file_rainbow_proto_depIdxs,
		EnumInfos:         file_rainbow_proto_enumTypes,
		MessageInfos:      file_rainbow_proto_msgTypes,
	}.Build()
	File_rainbow_proto = out.File
	file_rainbow_proto_rawDesc = nil
	file_rainbow_proto_goTypes = nil
	file_rainbow_proto_depIdxs = nil
}
